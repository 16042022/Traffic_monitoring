# Unit Tests for Traffic Monitoring System

## Overview

This directory contains comprehensive unit tests for the core components of the Traffic Monitoring System, focusing on:

- **VehicleTrackingComponent**: Tests for unique ID assignment and persistence
- **TrafficMonitoringComponent**: Tests for virtual line crossing logic and accurate counting
- **ObstacleAnomalyDetectionComponent**: Tests for 20-second stop time calculation and alert triggering
- **Repository Classes**: Tests for CRUD operations with the database

## Test Structure

```
tests/
├── __init__.py              # Test package initialization
├── test_base.py             # Base test class with database setup
├── run_tests.py             # Test runner script
├── test_vehicle_tracker.py  # VehicleTracker component tests
├── test_traffic_monitor.py  # TrafficMonitor component tests
├── test_anomaly_detector.py # AnomalyDetector component tests
├── test_video_repository.py # VideoRepository CRUD tests
├── test_traffic_data_repository.py    # TrafficDataRepository CRUD tests
└── test_anomaly_event_repository.py   # AnomalyEventRepository CRUD tests
```

## Running Tests

### Run All Tests
```bash
# From project root
python -m unittest discover tests

# Or using the test runner
python tests/run_tests.py --all
```

### Run Specific Test Categories
```bash
# Run only component tests
python tests/run_tests.py --components

# Run only repository tests
python tests/run_tests.py --repositories
```

### Run Individual Test Modules
```bash
# Run specific test
python tests/run_tests.py --test vehicle_tracker
python tests/run_tests.py --test traffic_monitor
python tests/run_tests.py --test anomaly_detector
python tests/run_tests.py --test video_repository
```

### Run with Verbose Output
```bash
python -m unittest tests.test_vehicle_tracker -v
```

## Test Coverage

### VehicleTracker Tests (12 tests)
- ✅ Unique ID assignment for each detected object
- ✅ ID persistence across multiple frames
- ✅ Tracking history maintenance with max limit
- ✅ Multiple object tracking simultaneously
- ✅ Old track cleanup for inactive objects
- ✅ Virtual line crossing detection
- ✅ Movement info calculation (speed, distance, stopped status)
- ✅ Reset functionality

### TrafficMonitor Tests (10 tests)
- ✅ Virtual line configuration parsing
- ✅ Vehicle counting on line crossing
- ✅ Multiple vehicle types counting
- ✅ Direction-specific counting (up/down/left/right)
- ✅ Hourly statistics aggregation
- ✅ Traffic density level calculation
- ✅ Non-vehicle objects exclusion from counts
- ✅ Reset functionality

### AnomalyDetector Tests (13 tests)
- ✅ Pedestrian detection and alerts
- ✅ Animal detection (various types)
- ✅ Obstacle detection
- ✅ Stopped vehicle detection with 20-second threshold
- ✅ Vehicle resuming movement clears stopped status
- ✅ Multiple vehicle types can be tracked as stopped
- ✅ Mixed anomalies detection simultaneously
- ✅ Severity levels for different anomaly types
- ✅ Stop duration accuracy testing
- ✅ Edge cases handling

### VideoRepository Tests (16 tests)
- ✅ CRUD operations (Create, Read, Update, Delete)
- ✅ Get by status filtering
- ✅ Recent videos retrieval
- ✅ Search functionality
- ✅ Status updates with processing duration
- ✅ Overall statistics calculation
- ✅ Eager loading of related data
- ✅ Bulk create operations

### TrafficDataRepository Tests (14 tests)
- ✅ CRUD operations
- ✅ Create or update functionality
- ✅ Time-based aggregations storage
- ✅ Top traffic videos retrieval
- ✅ Congestion summary statistics
- ✅ Comprehensive statistics calculation
- ✅ Lane-specific data storage
- ✅ Zero vehicle count edge case

### AnomalyEventRepository Tests (15 tests)
- ✅ CRUD operations
- ✅ Filtering by type, severity, and status
- ✅ Active anomalies retrieval
- ✅ Critical anomalies from recent hours
- ✅ Resolve and acknowledge functionality
- ✅ Anomaly timeline generation
- ✅ Stopped vehicle events filtering
- ✅ Bulk insert operations

## Test Database

Tests use an in-memory SQLite database that is created and destroyed for each test, ensuring:
- Test isolation
- Fast execution
- No persistent test data

## Edge Cases Covered

1. **Empty/None Values**: Tests handle empty detection lists and None values
2. **Zero Counts**: Traffic statistics with zero vehicles
3. **Boundary Conditions**: Stop time exactly at 20-second threshold
4. **Concurrent Objects**: Multiple objects crossing line simultaneously
5. **Direction Validation**: Objects moving opposite to counting direction

## Assertions Used

- `assertEqual`: For exact value matching
- `assertIsNotNone`: For existence checks
- `assertTrue/assertFalse`: For boolean conditions
- `assertIn/assertNotIn`: For membership tests
- `assertGreater/assertLess`: For numerical comparisons
- `assertAlmostEqual`: For floating-point comparisons

## Requirements

The tests require the following packages:
- unittest (built-in)
- SQLAlchemy
- All project dependencies

## Continuous Integration

These tests can be integrated into CI/CD pipelines:

```yaml
# Example GitHub Actions workflow
- name: Run Tests
  run: |
    python -m pip install -r requirements.txt
    python tests/run_tests.py --all
```

## Future Enhancements

Potential improvements for the test suite:
1. Add performance tests for large datasets
2. Add integration tests for complete workflows
3. Add mock tests for external dependencies (YOLO model)
4. Add stress tests for concurrent operations
5. Add code coverage reporting