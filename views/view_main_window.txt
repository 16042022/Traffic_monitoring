# views/main_window.py
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                            QSplitter, QMenuBar, QMenu, QAction, QStatusBar,
                            QDockWidget, QToolBar)
from PyQt5.QtCore import Qt, pyqtSignal, QTimer
from PyQt5.QtGui import QIcon, QKeySequence

from .video_player_widget import VideoPlayerWidget
from .analysis_panel import AnalysisPanel
from .history_widget import HistoryWidget


class MainWindow(QMainWindow):
    """
    Main application window
    """
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.setup_connections()
        
    def init_ui(self):
        """Initialize UI"""
        self.setWindowTitle("H·ªá th·ªëng Gi√°m s√°t Giao th√¥ng Th√¥ng minh")
        self.setGeometry(100, 100, 1400, 900)
        
        # Set application style
        self.setStyleSheet("""
            QMainWindow {
                background-color: #f5f5f5;
            }
            QGroupBox {
                font-weight: bold;
                border: 2px solid #cccccc;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        
        # Create menu bar
        self.create_menu_bar()
        
        # Create toolbar
        self.create_toolbar()
        
        # Create central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Main layout
        main_layout = QVBoxLayout()
        
        # Create main splitter
        main_splitter = QSplitter(Qt.Horizontal)
        
        # Left side: Video player
        self.video_player_widget = VideoPlayerWidget()
        
        # Right side: Analysis panel
        self.analysis_panel = AnalysisPanel()
        
        # Add to splitter
        main_splitter.addWidget(self.video_player_widget)
        main_splitter.addWidget(self.analysis_panel)
        main_splitter.setStretchFactor(0, 1)  # Video takes more space
        main_splitter.setStretchFactor(1, 1)
        
        main_layout.addWidget(main_splitter)
        central_widget.setLayout(main_layout)
        
        # Create dock for history
        self.history_dock = QDockWidget("L·ªãch s·ª≠ ph√¢n t√≠ch", self)
        self.history_dock.setAllowedAreas(Qt.BottomDockWidgetArea | Qt.RightDockWidgetArea)
        
        self.history_widget = HistoryWidget()
        self.history_dock.setWidget(self.history_widget)
        self.history_dock.hide()  # Hidden by default
        
        self.addDockWidget(Qt.BottomDockWidgetArea, self.history_dock)
        
        # Create status bar
        self.create_status_bar()
        
    def create_menu_bar(self):
        """Create menu bar"""
        menubar = self.menuBar()
        
        # File menu
        file_menu = menubar.addMenu("&T·ªáp")
        
        self.action_open_video = QAction("&M·ªü video...", self)
        self.action_open_video.setShortcut(QKeySequence.Open)
        self.action_open_video.setStatusTip("M·ªü file video ƒë·ªÉ ph√¢n t√≠ch")
        file_menu.addAction(self.action_open_video)
        
        file_menu.addSeparator()
        
        self.action_export_results = QAction("&Xu·∫•t k·∫øt qu·∫£...", self)
        self.action_export_results.setShortcut(QKeySequence("Ctrl+E"))
        self.action_export_results.setStatusTip("Xu·∫•t k·∫øt qu·∫£ ph√¢n t√≠ch")
        file_menu.addAction(self.action_export_results)
        
        file_menu.addSeparator()
        
        self.action_settings = QAction("&C√†i ƒë·∫∑t...", self)
        self.action_settings.setShortcut(QKeySequence("Ctrl+,"))
        self.action_settings.setStatusTip("C·∫•u h√¨nh ·ª©ng d·ª•ng")
        file_menu.addAction(self.action_settings)
        
        file_menu.addSeparator()
        
        self.action_exit = QAction("&Tho√°t", self)
        self.action_exit.setShortcut(QKeySequence.Quit)
        self.action_exit.setStatusTip("Tho√°t ·ª©ng d·ª•ng")
        file_menu.addAction(self.action_exit)
        
        # View menu
        view_menu = menubar.addMenu("&Hi·ªÉn th·ªã")
        
        self.action_show_history = QAction("&L·ªãch s·ª≠ ph√¢n t√≠ch", self)
        self.action_show_history.setCheckable(True)
        self.action_show_history.setShortcut(QKeySequence("Ctrl+H"))
        self.action_show_history.setStatusTip("Hi·ªán/·∫©n l·ªãch s·ª≠ ph√¢n t√≠ch")
        view_menu.addAction(self.action_show_history)
        
        view_menu.addSeparator()
        
        self.action_fullscreen = QAction("&To√†n m√†n h√¨nh", self)
        self.action_fullscreen.setCheckable(True)
        self.action_fullscreen.setShortcut(QKeySequence("F11"))
        view_menu.addAction(self.action_fullscreen)
        
        # Help menu
        help_menu = menubar.addMenu("&Tr·ª£ gi√∫p")
        
        self.action_help = QAction("&H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", self)
        self.action_help.setShortcut(QKeySequence.HelpContents)
        help_menu.addAction(self.action_help)
        
        help_menu.addSeparator()
        
        self.action_about = QAction("&V·ªÅ ·ª©ng d·ª•ng", self)
        help_menu.addAction(self.action_about)
        
    def create_toolbar(self):
        """Create toolbar"""
        toolbar = QToolBar("Main Toolbar")
        toolbar.setMovable(False)
        self.addToolBar(toolbar)
        
        # Add quick actions
        toolbar.addAction(self.action_open_video)
        toolbar.addSeparator()
        
        # Play controls in toolbar
        self.action_play = QAction("‚ñ∂", self)
        self.action_play.setStatusTip("Ph√°t video")
        toolbar.addAction(self.action_play)
        
        self.action_pause = QAction("‚è∏", self)
        self.action_pause.setStatusTip("T·∫°m d·ª´ng")
        toolbar.addAction(self.action_pause)
        
        self.action_stop = QAction("‚èπ", self)
        self.action_stop.setStatusTip("D·ª´ng")
        toolbar.addAction(self.action_stop)
        
        toolbar.addSeparator()
        
        # Analysis controls
        self.action_start_analysis = QAction("üöÄ", self)
        self.action_start_analysis.setStatusTip("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch")
        toolbar.addAction(self.action_start_analysis)
        
        self.action_stop_analysis = QAction("üõë", self)
        self.action_stop_analysis.setStatusTip("D·ª´ng ph√¢n t√≠ch")
        toolbar.addAction(self.action_stop_analysis)
        
        toolbar.addSeparator()
        toolbar.addAction(self.action_export_results)
        
    def create_status_bar(self):
        """Create status bar"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # Status message
        self.status_message = QLabel("S·∫µn s√†ng")
        self.status_bar.addWidget(self.status_message)
        
        # Separator
        self.status_bar.addPermanentWidget(QLabel(" | "))
        
        # Current file
        self.status_file = QLabel("Ch∆∞a c√≥ video")
        self.status_bar.addPermanentWidget(self.status_file)
        
        # Separator
        self.status_bar.addPermanentWidget(QLabel(" | "))
        
        # Processing status
        self.status_processing = QLabel("Ch∆∞a x·ª≠ l√Ω")
        self.status_bar.addPermanentWidget(self.status_processing)
        
        # Separator
        self.status_bar.addPermanentWidget(QLabel(" | "))
        
        # Time
        self.status_time = QLabel("")
        self.status_bar.addPermanentWidget(self.status_time)
        
        # Update time
        self.time_timer = QTimer()
        self.time_timer.timeout.connect(self.update_time)
        self.time_timer.start(1000)
        
    def setup_connections(self):
        """Setup signal connections"""
        # Toolbar actions to video player
        self.action_play.triggered.connect(
            lambda: self.video_player_widget.btn_play.click()
        )
        self.action_pause.triggered.connect(
            lambda: self.video_player_widget.btn_pause.click()
        )
        self.action_stop.triggered.connect(
            lambda: self.video_player_widget.btn_stop.click()
        )
        
        # Toolbar to analysis
        self.action_start_analysis.triggered.connect(
            lambda: self.analysis_panel.btn_start_analysis.click()
        )
        self.action_stop_analysis.triggered.connect(
            lambda: self.analysis_panel.btn_stop_analysis.click()
        )
        
        # View menu
        self.action_show_history.toggled.connect(self.toggle_history_dock)
        self.action_fullscreen.toggled.connect(self.toggle_fullscreen)
        
        # Help menu
        self.action_help.triggered.connect(self.show_help)
        self.action_about.triggered.connect(self.show_about)
        
    def toggle_history_dock(self, checked):
        """Toggle history dock visibility"""
        if checked:
            self.history_dock.show()
        else:
            self.history_dock.hide()
            
    def toggle_fullscreen(self, checked):
        """Toggle fullscreen mode"""
        if checked:
            self.showFullScreen()
        else:
            self.showNormal()
            
    def show_help(self):
        """Show help dialog"""
        from PyQt5.QtWidgets import QMessageBox
        QMessageBox.information(
            self,
            "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
            "H·ªá th·ªëng Gi√°m s√°t Giao th√¥ng Th√¥ng minh\n\n"
            "1. M·ªü video: T·ªáp ‚Üí M·ªü video ho·∫∑c Ctrl+O\n"
            "2. Ph√°t video ƒë·ªÉ xem tr∆∞·ªõc\n"
            "3. Nh·∫•n 'B·∫Øt ƒë·∫ßu ph√¢n t√≠ch' ƒë·ªÉ x·ª≠ l√Ω AI\n"
            "4. Xem k·∫øt qu·∫£ trong b·∫£ng th·ªëng k√™\n"
            "5. Xu·∫•t k·∫øt qu·∫£: T·ªáp ‚Üí Xu·∫•t k·∫øt qu·∫£\n\n"
            "Xem l·ªãch s·ª≠: Hi·ªÉn th·ªã ‚Üí L·ªãch s·ª≠ ph√¢n t√≠ch"
        )
        
    def show_about(self):
        """Show about dialog"""
        from PyQt5.QtWidgets import QMessageBox
        QMessageBox.about(
            self,
            "V·ªÅ ·ª©ng d·ª•ng",
            "H·ªá th·ªëng Gi√°m s√°t Giao th√¥ng Th√¥ng minh\n"
            "Phi√™n b·∫£n 1.0\n\n"
            "Ph√°t tri·ªÉn b·ªüi: [T√™n sinh vi√™n]\n"
            "Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n: [T√™n GVHD]\n\n"
            "ƒê·ªì √°n t·ªët nghi·ªáp 2024"
        )
        
    def update_time(self):
        """Update time display"""
        from datetime import datetime
        current_time = datetime.now().strftime("%H:%M:%S")
        self.status_time.setText(current_time)
        
    def update_status(self, message: str):
        """Update status message"""
        self.status_message.setText(message)
        
    def update_file_status(self, filename: str):
        """Update file status"""
        self.status_file.setText(f"Video: {filename}")
        
    def update_processing_status(self, status: str):
        """Update processing status"""
        self.status_processing.setText(status)
        
    def closeEvent(self, event):
        """Handle close event"""
        from PyQt5.QtWidgets import QMessageBox
        
        reply = QMessageBox.question(
            self,
            "X√°c nh·∫≠n tho√°t",
            "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t ·ª©ng d·ª•ng?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()


# Import for convenience
from PyQt5.QtWidgets import QLabel